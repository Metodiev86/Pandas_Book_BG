# 3.	Запис в JSON с различна ориентация и форматиране: Създайте DataFrame с произволни данни (поне 3 колони и 5 реда). Запишете го в JSON файл output_records.json с ориентация 'records' и с отстъпи от 4 интервала. След това запишете същия DataFrame в друг JSON файл output_index.json с ориентация 'index'. Отворете и сравнете съдържанието на двата JSON файла.

import pandas as pd

# --- 1. Създаване на примерен DataFrame ---
df = pd.DataFrame({
    "Име": ["Ана", "Борис", "Веселин", "Галя", "Даниел"],
    "Град": ["София", "Пловдив", "Варна", "Бургас", "Русе"],
    "Възраст": [28, 35, 22, 30, 41]
})

# --- 2. Запис в JSON с ориентация 'records' и отстъпи ---
df.to_json("output_records.json", orient="records", force_ascii=False, indent=4)

# --- 3. Запис в JSON с ориентация 'index' ---
df.to_json("output_index.json", orient="index", force_ascii=False)

# --- 4. Проверка на съдържанието (по избор, тук само четем и отпечатваме) ---
print("\nJSON с ориентация 'records':")
with open("output_records.json", "r", encoding="utf-8") as f:
    print(f.read())

print("\nJSON с ориентация 'index':")
with open("output_index.json", "r", encoding="utf-8") as f:
    print(f.read())

#=============================================Обяснение:=====================================================
#
# orient='records' ще създаде списък от речници (по един за всеки ред).
#
# orient='index' ще създаде речник, където индексите са ключове, а стойностите – речници със съответните колони.
#
# ===========================================================================================================
# Разликата е главно в структурата:
#
# records е подходящ за масиви от обекти (напр. REST API),
#
# index е подходящ за сериализация с цел зареждане обратно със orient='index'.