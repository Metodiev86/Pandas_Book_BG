# 12.	След изпълнението на горните задачи, проверете отново за наличие на липсващи стойности в оригиналния df_students. Обяснете защо (или защо не) има все още липсващи стойности.

import pandas as pd
import numpy as np

# Пресъздаване на оригиналния DataFrame, както беше в началото на задачите.
# Това е важно, защото предишните задачи работеха с КОПИЕ или променяха df_students НА МЯСТО
# в зависимост от начина, по който е написан кодът. За целите на проверката на "оригиналния"
# df_students, трябва да се уверим, че започваме от чисто състояние.
data = {'Име': ['Алиса', 'Боб', 'Чарли', 'Дейвид', 'Ева'],
        'Възраст': [25, np.nan, 22, 35, np.nan],
        'Оценка': [8.5, 9.2, np.nan, 9.5, 8.9],
        'Град': ['София', None, 'София', 'Варна', 'Бургас']}
df_students = pd.DataFrame(data)

print("Оригинален DataFrame 'df_students' преди проверката:")
print(df_students)
print("-" * 30)

# Изпълняваме отново задачите, които МОДИФИЦИРАТ df_students НА МЯСТО.
# Забележка: Някои от предходните задачи създаваха НОВ DataFrame (напр. df_students_dropped_any, df_students_complete_info, df_filtered_subset, df_filled).
# Тук ще изпълним само тези, които директно променят df_students.

# Запълване на липсващите стойности в колоната 'Възраст' със средната възраст (задача 6)
mean_age = df_students['Възраст'].mean()
df_students['Възраст'] = df_students['Възраст'].fillna(mean_age)

# Запълване на липсващите стойности в колоната 'Оценка' с предишната валидна оценка (задача 7)
df_students['Оценка'] = df_students['Оценка'].fillna(method='ffill')

# Интерполиране на липсващите стойности в колоната 'Възраст', използвайки линейна интерполация (задача 8)
# Забележка: Възраст вече беше запълнена със средната, така че интерполацията няма да има NaN за обработка.
# Ако искахме да видим интерполацията, трябваше да изпълним само тази стъпка за 'Възраст'.
# Ще изпълним отново, за да видим ефекта върху вече запълнени (ако има) или останали NaN от други задачи.
# Тук е важно, че ред 4 ('Ева') за 'Възраст' може да остане NaN ако няма следващ валиден елемент.
# За да го демонстрираме, ще пресъздадем df_students преди тази стъпка, ако е нужно.
# За целите на тази задача, ще приемем, че предишните промени са факт.
df_students['Възраст'] = df_students['Възраст'].interpolate(method='linear') # Това ще попълни отново np.nan от Ева, ако са били останали.

# За колоната 'Град', запълнете липсващите стойности с най-често срещания град (модата) (задача 10)
most_frequent_city = df_students['Град'].mode()[0]
df_students['Град'] = df_students['Град'].fillna(most_frequent_city)


print("\nDataFrame 'df_students' след изпълнението на модифициращите го задачи:")
print(df_students)
print("-" * 30)


# Проверка за наличие на липсващи стойности в модифицирания df_students
missing_after_tasks = df_students.isnull().sum()

print("\nБрой на липсващите стойности след изпълнение на задачите (в 'df_students'):")
print(missing_after_tasks)

# Проверка дали има общо липсващи стойности
total_missing_after_tasks = missing_after_tasks.sum()
print(f"\nОбщ брой липсващи стойности след задачите: {total_missing_after_tasks}")

#|==========================================================================================================================|
#|===================================================  КРАТКО ОБЯСНЕНИЕ  ===================================================|
#|==========================================================================================================================|

# Обяснение защо (или защо не) има все още липсващи стойности:
# След като изпълнихме задачите, които модифицират оригиналния df_students на място (а именно запълването на 'Възраст' със средна стойност, 'Оценка' с ffill и 'Град' с модата, както и интерполацията на 'Възраст'):
#
# Защо вече няма липсващи стойности (или броят им е силно намален):
#
# Колона 'Възраст': Първо беше запълнена със средната възраст. След това беше приложена линейна интерполация. Тъй като 'Възраст' е числова колона и имаме поне една валидна стойност преди и една след липсващите (или до края на колоната, ако се приложи fillna с method='ffill' след интерполацията за крайни NaN), всички np.nan стойности в тази колона би трябвало да са запълнени.
# Колона 'Оценка': Липсващите стойности бяха запълнени с ffill. Това означава, че всеки np.nan е заместен с последната валидна стойност преди него. Ако първият елемент в колоната беше np.nan, той щеше да остане такъв, но в нашия случай първата оценка е валидна (8.5).
# Колона 'Град': Липсващите стойности (None) бяха запълнени с най-често срещания град ('София').
# Ако все пак има останали липсващи стойности, защо?
#
# ffill ограничение: Ако ffill се използва в колона, която започва с NaN (т.е., първият елемент е липсващ), този NaN няма да бъде запълнен, защото няма предишна стойност. В нашия случай, 'Оценка' не започва с NaN.
# interpolate ограничение: Както обяснихме по-рано, линейната интерполация по подразбиране (method='linear') може да не запълни NaN стойности в края на серията, ако няма следваща валидна точка за интерполация (като случая с 'Възраст' за Ева, ако не беше запълнен със средната преди това). Обаче, тъй като в задача 6 'Възраст' беше запълнена със средната стойност, това не би трябвало да е проблем тук.
# Задачи, които връщат нов DataFrame: Важно е да се разбере, че някои от предходните задачи (като тези с dropna() без inplace=True) създадоха нови DataFrame-и. Те не модифицираха оригиналния df_students. Например, df_students_dropped_any е нов DataFrame, а df_students оставаше непроменен от тези конкретни операции. За да видите резултата от тези операции в df_students, трябваше да ги присвоите обратно на него (df_students = df_students.dropna(...)).
# След изпълнението на всички задачи, които пряко променят df_students (запълванията и интерполациите), проверката df_students.isnull().sum() трябва да покаже 0 липсващи стойности за всички колони, тъй като систематично запълнихме всички известни пропуски, базирайки се на задачите.
#
# Тази проверка е изключително важна стъпка в процеса на почистване на данни, за да се гарантира, че липсващите стойности са адекватно адресирани.